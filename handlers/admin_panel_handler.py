# advanced_earning_bot/handlers/admin_panel_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from config import ADMIN_IDS
from modules import user_manager, bot_settings, ad_manager

"""
ржПржЗ ржлрж╛ржЗрж▓ржЯрж┐ ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржорж╕рзНржд ржХрж╛рж░рзНржпржХрж╛рж░рж┐рждрж╛ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рзЗред
рж╢рзБржзрзБржорж╛рждрзНрж░ ADMIN_IDS-ржП ржерж╛ржХрж╛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░рж╛ ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗред
"""

# ConversationHandler ржПрж░ ржЬржирзНржп рж╕рзНржЯрзЗржЯ
USER_ID_INPUT, BALANCE_CHANGE_INPUT = range(2)


# --- Helper Functions ---
async def is_admin(user_id: int) -> bool:
    """ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржПржбржорж┐ржи ржХрж┐ржирж╛ рждрж╛ ржЪрзЗржХ ржХрж░рзЗред"""
    return user_id in ADMIN_IDS

def build_admin_menu():
    """ржорзВрж▓ ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓рзЗрж░ ржорзЗржирзБ ржмрж╛ржЯржи рждрзИрж░рж┐ ржХрж░рзЗред"""
    pending_ads_count = len(ad_manager.get_pending_ads())
    ad_manage_text = f"ЁЯУв ржмрж┐ржЬрзНржЮрж╛ржкржи ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ({pending_ads_count})" if pending_ads_count > 0 else "ЁЯУв ржмрж┐ржЬрзНржЮрж╛ржкржи ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ"

    keyboard = [
        [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="admin_stats")],
        [InlineKeyboardButton("тЪЩя╕П ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзЗржЯрж┐ржВрж╕", callback_data="admin_global_settings")],
        [InlineKeyboardButton("ЁЯФз ржлрж┐ржЪрж╛рж░ ржХржирзНржЯрзНрж░рзЛрж▓", callback_data="admin_feature_control")],
        [InlineKeyboardButton("ЁЯСд ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ", callback_data="admin_user_manage_start")],
        [InlineKeyboardButton(ad_manage_text, callback_data="admin_ad_manage")],
        [InlineKeyboardButton("тЭМ ржкрзНржпрж╛ржирзЗрж▓ ржмржирзНржз ржХрж░рзБржи", callback_data="admin_close")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_user_manage_menu(user_id, is_banned=False):
    """ржПржХржЬржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржорзНржпрж╛ржирзЗржЬ ржХрж░рж╛рж░ ржЬржирзНржп ржмрж╛ржЯржи рждрзИрж░рж┐ ржХрж░рзЗред"""
    ban_text = "тЬЕ ржЖржиржмрзНржпрж╛ржи ржХрж░рзБржи" if is_banned else "ЁЯЪл ржмрзНржпрж╛ржи ржХрж░рзБржи"
    keyboard = [
        [
            InlineKeyboardButton("ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржпрзЛржЧ ржХрж░рзБржи", callback_data=f"user_add_balance_{user_id}"),
            InlineKeyboardButton("ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржХрж╛ржЯрзБржи", callback_data=f"user_deduct_balance_{user_id}")
        ],
        [
            InlineKeyboardButton(ban_text, callback_data=f"user_toggle_ban_{user_id}")
        ],
        [InlineKeyboardButton("тмЕя╕П ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="admin_main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- Main Command Handler ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/admin ржХржорж╛ржирзНржб рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗ ржПржмржВ ржорзВрж▓ ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ ржжрзЗржЦрж╛ржпрж╝ред"""
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await update.message.reply_text("ржжрзБржГржЦрж┐ржд, ржПржЗ ржХржорж╛ржирзНржбржЯрж┐ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржбржорж┐ржиржжрзЗрж░ ржЬржирзНржпред")
        return

    text = "ЁЯСЛ ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓рзЗ рж╕рзНржмрж╛ржЧрждржо! ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржПржХржЯрж┐ ржЕржкрж╢ржи ржмрзЗржЫрзЗ ржирж┐ржи:"
    # ржпржжрж┐ ржорзЗрж╕рзЗржЬ рж╣ржпрж╝, ржирждрзБржи ржорзЗрж╕рзЗржЬ ржкрж╛ржарж╛ржиред ржпржжрж┐ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ рж╣ржпрж╝, ржПржбрж┐ржЯ ржХрж░рзБржиред
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=build_admin_menu())
    else:
        await update.message.reply_text(text, reply_markup=build_admin_menu())


# --- Callback Query Handlers ---
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓рзЗрж░ рж╕ржХрж▓ ржмрж╛ржЯржи ржХрзНрж▓рж┐ржХ рж╣рзНржпрж╛ржирзНржбрзЗрж▓ ржХрж░рзЗред"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.edit_message_text("ржжрзБржГржЦрж┐ржд, ржЖржкржирж┐ ржПржбржорж┐ржи ржиржиред")
        return
    
    data = query.data

    if data == "admin_main_menu":
        await admin_panel(update, context)
    
    elif data == "admin_stats":
        stats_result = user_manager.get_bot_statistics()
        if stats_result['success']:
            stats = stats_result['data']
            text = (
                f"ЁЯУК **ржмржЯрзЗрж░ ржмрж░рзНрждржорж╛ржи ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи**\n\n"
                f"ЁЯСд ржорзЛржЯ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: `{stats['total_users']}`\n"
                f"тЬЕ ржнрзЗрж░рж┐ржлрж╛ржЗржб ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: `{stats['verified_users']}`\n"
                f"ЁЯЪл ржмрзНржпрж╛ржиржб ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА: `{stats['banned_users']}`\n\n"
                f"_(ржПржЗ рждржерзНржп рж░рж┐ржпрж╝рзЗрж▓-ржЯрж╛ржЗржорзЗ ржЖржкржбрзЗржЯ рж╣ржпрж╝ред)_"
            )
        else:
            text = f"ржжрзБржГржЦрж┐ржд, ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи рж▓рзЛржб ржХрж░рждрзЗ ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ:\n`{stats_result['message']}`"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("тмЕя╕П ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="admin_main_menu")]])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
    
    elif data == "admin_global_settings":
        await show_global_settings(query)

    elif data == "admin_feature_control":
        await show_feature_control(query)
        
    elif data == "admin_ad_manage":
        await show_pending_ads(query)

    elif data == "admin_close":
        await query.edit_message_text("ржкрзНржпрж╛ржирзЗрж▓ ржмржирзНржз ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")


async def show_global_settings(query):
    text = "тЪЩя╕П ржЧрзНрж▓рзЛржмрж╛рж▓ рж╕рзЗржЯрж┐ржВрж╕\n\nржПржЦрж╛ржи ржерзЗржХрзЗ ржЖржкржирж┐ ржмржЯрзЗрж░ ржорзВрж▓ ржирж┐ржпрж╝ржорж╛ржмрж▓рзА ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред"
    keyboard = [[InlineKeyboardButton("тмЕя╕П ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="admin_main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_feature_control(query):
    text = "ЁЯФз ржлрж┐ржЪрж╛рж░ ржХржирзНржЯрзНрж░рзЛрж▓\n\nржПржЦрж╛ржи ржерзЗржХрзЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржлрж┐ржЪрж╛рж░ ржЪрж╛рж▓рзБ ржмрж╛ ржмржирзНржз ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржиред"
    settings_to_show = {'feature_ads_view': 'ЁЯСБя╕П ржмрж┐ржЬрзНржЮрж╛ржкржи ржжрзЗржЦрж╛', 'feature_deposit': 'ЁЯТ░ ржбрж┐ржкрзЛржЬрж┐ржЯ', 'feature_withdrawal': 'ЁЯТ╕ ржЙржЗржержбрзНрж░', 'feature_balance_transfer': 'ЁЯФБ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЯрзНрж░рж╛ржирзНрж╕ржлрж╛рж░'}
    buttons = []
    for setting_name, button_text in settings_to_show.items():
        _, is_active = bot_settings.get_setting(setting_name)
        status_icon = "тЬЕ" if is_active else "тЭМ"
        buttons.append([InlineKeyboardButton(f"{button_text} {status_icon}", callback_data=f"toggle_{setting_name}")])
    buttons.append([InlineKeyboardButton("тмЕя╕П ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="admin_main_menu")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))


async def toggle_feature_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    setting_name = query.data.replace("toggle_", "")
    _, current_status = bot_settings.get_setting(setting_name)
    new_status = not current_status
    bot_settings.update_setting(setting_name, new_status=new_status)
    await show_feature_control(query)


# --- Ad Management ---
async def show_pending_ads(query):
    """ржкрзЗржирзНржбрж┐ржВ ржерж╛ржХрж╛ ржмрж┐ржЬрзНржЮрж╛ржкржиржЧрзБрж▓рзЛрж░ рждрж╛рж▓рж┐ржХрж╛ ржжрзЗржЦрж╛ржпрж╝ред"""
    pending_ads = ad_manager.get_pending_ads()

    if not pending_ads:
        text = " ржкрж░рзНржпрж╛рж▓рзЛржЪржирж╛рж░ ржЬржирзНржп ржХрзЛржирзЛ ржирждрзБржи ржмрж┐ржЬрзНржЮрж╛ржкржи ржирзЗржЗред"
        keyboard = [[InlineKeyboardButton("тмЕя╕П ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="admin_main_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    ad_data = pending_ads[0]
    columns = ['ad_id', 'owner_user_id', 'ad_source', 'ad_type', 'ad_content', 'status', 'target_views', 'current_views', 'view_duration_seconds', 'viewed_by_users']
    ad_dict = dict(zip(columns, ad_data))
    
    text = (
        f"**ЁЯУв ржирждрзБржи ржмрж┐ржЬрзНржЮрж╛ржкржи рж░рж┐ржнрж┐ржЙ**\n\n"
        f"**Ad ID:** `{ad_dict['ad_id']}`\n"
        f"**ржЬржорж╛ ржжрж┐ржпрж╝рзЗржЫрзЗ:** `{ad_dict['owner_user_id']}`\n"
        f"**ржзрж░ржи:** `{ad_dict['ad_type']}`\n"
        f"**ржХржирзНржЯрзЗржирзНржЯ:** `{ad_dict['ad_content']}`\n"
        f"**ржЯрж╛рж░рзНржЧрзЗржЯ ржнрж┐ржЙ:** `{ad_dict['target_views']}`\n"
        f"**рж╕ржоржпрж╝ржХрж╛рж▓:** `{ad_dict['view_duration_seconds']} рж╕рзЗржХрзЗржирзНржб`\n\n"
        f"ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржмрж┐ржЬрзНржЮрж╛ржкржиржЯрж┐ ржЕржирзБржорзЛржжржи ржмрж╛ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рзБржи:"
    )
    
    keyboard = [
        [
            InlineKeyboardButton("тЬЕ ржЕржирзБржорзЛржжржи ржХрж░рзБржи", callback_data=f"ad_approve_{ad_dict['ad_id']}"),
            InlineKeyboardButton("тЭМ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рзБржи", callback_data=f"ad_reject_{ad_dict['ad_id']}")
        ],
        [InlineKeyboardButton("тЮбя╕П ржкрж░ржмрж░рзНрждрзА (Skip)", callback_data="admin_ad_manage")],
        [InlineKeyboardButton("тмЕя╕П ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="admin_main_menu")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')


async def ad_review_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ржмрж┐ржЬрзНржЮрж╛ржкржи ржЕржирзБржорзЛржжржи ржмрж╛ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛рж░ ржХрж╛ржЬ ржХрж░рзЗред"""
    query = update.callback_query
    
    data = query.data.split('_')
    action = data[1] 
    ad_id = int(data[2])

    if action == "approve":
        ad_manager.update_ad_status(ad_id, "approved")
        await query.answer("ржмрж┐ржЬрзНржЮрж╛ржкржиржЯрж┐ ржЕржирзБржорзЛржжржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!", show_alert=True)
    elif action == "reject":
        ad_manager.update_ad_status(ad_id, "rejected")
        await query.answer("ржмрж┐ржЬрзНржЮрж╛ржкржиржЯрж┐ ржкрзНрж░рждрзНржпрж╛ржЦрзНржпрж╛ржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", show_alert=True)
        # TODO: ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржЯрж╛ржХрж╛ ржлрзЗрж░ржд ржжрзЗржУржпрж╝рж╛ ржПржмржВ ржирзЛржЯрж┐ржлрж┐ржХрзЗрж╢ржи ржкрж╛ржарж╛ржирзЛрж░ рж▓ржЬрж┐ржХред

    await show_pending_ads(query)


# --- User Management Conversation ---
async def user_manage_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    text = "ЁЯСд **ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ**\n\nржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржпрзЗ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ ржорзНржпрж╛ржирзЗржЬ ржХрж░рждрзЗ ржЪрж╛ржи рждрж╛рж░ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржо ржЖржЗржбрж┐ ржжрж┐ржи:"
    context.user_data['last_admin_message'] = await query.edit_message_text(text)
    return USER_ID_INPUT

async def user_id_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        target_user_id = int(update.message.text)
        await update.message.delete() # ржЗржЙржЬрж╛рж░ ржЗржиржкрзБржЯ ржбрж┐рж▓рж┐ржЯ ржХрж░рзЗ ржжрж┐ржи
        user_data = user_manager.get_user_by_id(target_user_id)
        if not user_data:
            await context.user_data['last_admin_message'].edit_text("ржПржЗ ржЖржЗржбрж┐рж░ ржХрзЛржирзЛ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ /cancel ржжрж┐ржиред")
            return USER_ID_INPUT
        
        context.user_data['target_user_id'] = target_user_id
        await show_user_profile(context.user_data['last_admin_message'], user_data)
        
    except (ValueError, KeyError):
        await context.user_data['last_admin_message'].edit_text("ржПржЯрж┐ ржПржХржЯрж┐ рж╕ржарж┐ржХ ржирж┐ржЙржорзЗрж░рж┐ржХ ржЖржЗржбрж┐ ржиржпрж╝ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи ржмрж╛ /cancel ржжрж┐ржиред")
        return USER_ID_INPUT

    return ConversationHandler.END

async def show_user_profile(message, user_data):
    user_id = user_data['user_id']
    text = (
        f"ЁЯСд **ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржкрзНрж░рзЛржлрж╛ржЗрж▓**\n\n"
        f"**ID:** `{user_id}`\n"
        f"**Username:** @{user_data.get('username', 'N/A')}\n"
        f"**ржмрзНржпрж╛рж▓рзЗржирзНрж╕:** `{user_data['balance']}` ржкржпрж╝рзЗржирзНржЯ\n"
        f"**ржнрзЗрж░рж┐ржлрж╛ржЗржб:** `{'рж╣рзНржпрж╛ржБ' if user_data['is_verified'] else 'ржирж╛'}`\n"
        f"**ржмрзНржпрж╛ржиржб:** `{'рж╣рзНржпрж╛ржБ' if user_data['is_banned'] else 'ржирж╛'}`\n"
        f"**ржУржпрж╝рж╛рж░рзНржирж┐ржВ:** `{user_data['warning_count']}`\n"
    )
    keyboard = build_user_manage_menu(user_id, user_data['is_banned'])
    await message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def user_manage_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    action = data[1]
    target_user_id = int(data[-1])

    if action == "toggle" and data[2] == "ban":
        user_data = user_manager.get_user_by_id(target_user_id)
        new_ban_status = not user_data['is_banned']
        user_manager.set_ban_status(target_user_id, new_ban_status)
        await query.answer(f"ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАржХрзЗ {'ржмрзНржпрж╛ржи' if new_ban_status else 'ржЖржиржмрзНржпрж╛ржи'} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред", show_alert=True)
        
        updated_user_data = user_manager.get_user_by_id(target_user_id)
        await show_user_profile(query.message, updated_user_data)
        
    elif action in ["add", "deduct"]:
        context.user_data['target_user_id'] = target_user_id
        context.user_data['balance_action'] = action
        action_text = "ржпрзЛржЧ" if action == "add" else "ржХрж╛ржЯрждрзЗ"
        context.user_data['last_admin_message'] = await query.edit_message_text(f"ржЖржкржирж┐ ржХржд ржкржпрж╝рзЗржирзНржЯ {action_text} ржЪрж╛ржи? ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржкрж░рж┐ржорж╛ржгржЯрж┐ рж▓рж┐ржЦрзБржи:")
        return BALANCE_CHANGE_INPUT

    return ConversationHandler.END

async def balance_change_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = int(update.message.text)
        await update.message.delete()
        if amount <= 0:
            await context.user_data['last_admin_message'].edit_text("ржкрж░рж┐ржорж╛ржгржЯрж┐ ржЕржмрж╢рзНржпржЗ ржПржХржЯрж┐ ржкржЬрж┐ржЯрж┐ржн рж╕ржВржЦрзНржпрж╛ рж╣рждрзЗ рж╣ржмрзЗред")
            return ConversationHandler.END

        target_user_id = context.user_data['target_user_id']
        action = context.user_data['balance_action']
        amount_to_change = amount if action == "add" else -amount
        
        user_manager.update_balance(target_user_id, amount_to_change)
        
        user_data = user_manager.get_user_by_id(target_user_id)
        await show_user_profile(context.user_data['last_admin_message'], user_data)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"рж╕ржлрж▓ржнрж╛ржмрзЗ {amount} ржкржпрж╝рзЗржирзНржЯ {'ржпрзЛржЧ' if action == 'add' else 'ржХрж╛ржЯрж╛'} рж╣ржпрж╝рзЗржЫрзЗред")

    except (ValueError, KeyError):
        await context.user_data['last_admin_message'].edit_text("ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣ржпрж╝рзЗржЫрзЗ ржмрж╛ рж╕ржарж┐ржХ ржкрж░рж┐ржорж╛ржг ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝ржирж┐ред")

    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """ржпрзЗржХрзЛржирзЛ ржХржиржнрж╛рж░рзНрж╕рзЗрж╢ржи ржмрж╛рждрж┐рж▓ ржХрж░рзЗред"""
    if 'target_user_id' in context.user_data: del context.user_data['target_user_id']
    if 'balance_action' in context.user_data: del context.user_data['balance_action']
        
    await update.message.reply_text("ржЕржкрж╛рж░рзЗрж╢ржи ржмрж╛рждрж┐рж▓ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")
    # ржорзВрж▓ ржПржбржорж┐ржи ржкрзНржпрж╛ржирзЗрж▓ржЯрж┐ ржЖржмрж╛рж░ ржжрзЗржЦрж╛ржи
    await admin_panel(update, context)
    return ConversationHandler.END
