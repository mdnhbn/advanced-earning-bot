# advanced_earning_bot/handlers/admin_panel_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler

from config import ADMIN_IDS
from modules import user_manager, bot_settings

"""
‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶æ‡¶∞‡¶ø‡¶§‡¶æ ‡¶™‡¶∞‡¶ø‡¶ö‡¶æ‡¶≤‡¶®‡¶æ ‡¶ï‡¶∞‡ßá‡•§
‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ADMIN_IDS-‡¶è ‡¶•‡¶æ‡¶ï‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞‡¶æ ‡¶è‡¶ü‡¶ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡•§
"""

# ConversationHandler ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
USER_ID_INPUT, BALANCE_CHANGE_INPUT = range(2)


# --- Helper Functions ---
async def is_admin(user_id: int) -> bool:
    """‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶ï‡¶ø‡¶®‡¶æ ‡¶§‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßá‡•§"""
    return user_id in ADMIN_IDS

def build_admin_menu():
    """‡¶Æ‡ßÇ‡¶≤ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    keyboard = [
        [InlineKeyboardButton("üìä ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®", callback_data="admin_stats")],
        [InlineKeyboardButton("‚öôÔ∏è ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏", callback_data="admin_global_settings")],
        [InlineKeyboardButton("üîß ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤", callback_data="admin_feature_control")],
        [InlineKeyboardButton("üë§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü", callback_data="admin_user_manage_start")],
        [InlineKeyboardButton("üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü", callback_data="admin_ad_manage")],
        [InlineKeyboardButton("‚ùå ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="admin_close")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_user_manage_menu(user_id, is_banned=False):
    """‡¶è‡¶ï‡¶ú‡¶® ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡¶æ‡¶ü‡¶® ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßá‡•§"""
    ban_text = "‚úÖ ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" if is_banned else "üö´ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"
    keyboard = [
        [
            InlineKeyboardButton("üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data=f"user_add_balance_{user_id}"),
            InlineKeyboardButton("üí∏ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶æ‡¶ü‡ßÅ‡¶®", callback_data=f"user_deduct_balance_{user_id}")
        ],
        [
            InlineKeyboardButton(ban_text, callback_data=f"user_toggle_ban_{user_id}")
        ],
        [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ‡¶§‡ßá ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- Main Command Handler ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/admin ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá ‡¶è‡¶¨‡¶Ç ‡¶Æ‡ßÇ‡¶≤ ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§"""
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
        return

    text = "üëã ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:"
    await update.message.reply_text(text, reply_markup=build_admin_menu())


# --- Callback Query Handlers ---
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá‡¶∞ ‡¶∏‡¶ï‡¶≤ ‡¶¨‡¶æ‡¶ü‡¶® ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.edit_message_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")
        return
    
    data = query.data

    if data == "admin_main_menu":
        await query.edit_message_text("üëã ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ!", reply_markup=build_admin_menu())
    
    elif data == "admin_stats":
        stats_result = user_manager.get_bot_statistics()
        if stats_result['success']:
            stats = stats_result['data']
            text = (
                f"üìä **‡¶¨‡¶ü‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®**\n\n"
                f"üë§ ‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: `{stats['total_users']}`\n"
                f"‚úÖ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: `{stats['verified_users']}`\n"
                f"üö´ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: `{stats['banned_users']}`\n\n"
                f"_(‡¶è‡¶á ‡¶§‡¶•‡ßç‡¶Ø ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡•§)_"
            )
        else:
            text = f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n`{stats_result['message']}`"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
    
    elif data == "admin_global_settings":
        await show_global_settings(query)

    elif data == "admin_feature_control":
        await show_feature_control(query)
    
    elif data == "admin_ad_manage":
        await query.edit_message_text("üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü (‡¶∂‡ßÄ‡¶ò‡ßç‡¶∞‡¶á ‡¶Ü‡¶∏‡¶õ‡ßá...)", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]]))

    elif data == "admin_close":
        await query.edit_message_text("‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")


async def show_global_settings(query):
    text = "‚öôÔ∏è ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏\n\n‡¶è‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def show_feature_control(query):
    text = "üîß ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤\n\n‡¶è‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
    settings_to_show = {'feature_ads_view': 'üëÅÔ∏è ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ', 'feature_deposit': 'üí∞ ‡¶°‡¶ø‡¶™‡ßã‡¶ú‡¶ø‡¶ü', 'feature_withdrawal': 'üí∏ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞', 'feature_balance_transfer': 'üîÅ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞'}
    buttons = []
    for setting_name, button_text in settings_to_show.items():
        _, is_active = bot_settings.get_setting(setting_name)
        status_icon = "‚úÖ" if is_active else "‚ùå"
        buttons.append([InlineKeyboardButton(f"{button_text} {status_icon}", callback_data=f"toggle_{setting_name}")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))


async def toggle_feature_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    setting_name = query.data.replace("toggle_", "")
    _, current_status = bot_settings.get_setting(setting_name)
    new_status = not current_status
    bot_settings.update_setting(setting_name, new_status=new_status)
    await show_feature_control(query)


# --- User Management Conversation ---
async def user_manage_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    text = "üë§ **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü**\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®:"
    await query.edit_message_text(text)
    return USER_ID_INPUT

async def user_id_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        target_user_id = int(update.message.text)
        user_data = user_manager.get_user_by_id(target_user_id)
        if not user_data:
            await update.message.reply_text("‡¶è‡¶á ‡¶Ü‡¶á‡¶°‡¶ø‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ /cancel ‡¶¶‡¶ø‡¶®‡•§")
            return USER_ID_INPUT
        
        context.user_data['target_user_id'] = target_user_id
        await show_user_profile(update.message, user_data)
        
    except ValueError:
        await update.message.reply_text("‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶ø‡¶â‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡¶Ø‡¶º‡•§ ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ /cancel ‡¶¶‡¶ø‡¶®‡•§")
        return USER_ID_INPUT

    return ConversationHandler.END


async def show_user_profile(message, user_data):
    user_id = user_data['user_id']
    text = (
        f"üë§ **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤**\n\n"
        f"**ID:** `{user_id}`\n"
        f"**Username:** @{user_data['username']}\n"
        f"**‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:** `{user_data['balance']}` ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü\n"
        f"**‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶°:** `{'‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' if user_data['is_verified'] else '‡¶®‡¶æ'}`\n"
        f"**‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶°:** `{'‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' if user_data['is_banned'] else '‡¶®‡¶æ'}`\n"
        f"**‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç:** `{user_data['warning_count']}`\n"
    )
    keyboard = build_user_manage_menu(user_id, user_data['is_banned'])
    await message.reply_text(text, reply_markup=keyboard, parse_mode='Markdown')


async def user_manage_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    action = data[1]
    target_user_id = int(data[-1])

    if action == "toggle" and data[2] == "ban":
        user_data = user_manager.get_user_by_id(target_user_id)
        new_ban_status = not user_data['is_banned']
        user_manager.set_ban_status(target_user_id, new_ban_status)
        await query.answer(f"‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá {'‡¶¨‡ßç‡¶Ø‡¶æ‡¶®' if new_ban_status else '‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶®'} ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=True)
        
        # ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶∞‡¶ø‡¶´‡ßç‡¶∞‡ßá‡¶∂ ‡¶ï‡¶∞‡ßÅ‡¶®
        updated_user_data = user_manager.get_user_by_id(target_user_id)
        await show_user_profile(query.message, updated_user_data)
        
    elif action in ["add", "deduct"]:
        context.user_data['target_user_id'] = target_user_id
        context.user_data['balance_action'] = action
        action_text = "‡¶Ø‡ßã‡¶ó" if action == "add" else "‡¶ï‡¶æ‡¶ü‡¶§‡ßá"
        await query.edit_message_text(f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü {action_text} ‡¶ö‡¶æ‡¶®? ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
        return BALANCE_CHANGE_INPUT

    return ConversationHandler.END


async def balance_change_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = int(update.message.text)
        if amount <= 0:
            await update.message.reply_text("‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
            return ConversationHandler.END

        target_user_id = context.user_data['target_user_id']
        action = context.user_data['balance_action']
        
        amount_to_change = amount if action == "add" else -amount
        
        user_manager.update_balance(target_user_id, amount_to_change)
        
        await update.message.reply_text(f"‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá {amount} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü {'‡¶Ø‡ßã‡¶ó' if action == 'add' else '‡¶ï‡¶æ‡¶ü‡¶æ'} ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
        
        # ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
        user_data = user_manager.get_user_by_id(target_user_id)
        await show_user_profile(update.message, user_data)

    except (ValueError, KeyError):
        await update.message.reply_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")

    return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """‡¶Ø‡ßá‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶®‡¶≠‡¶æ‡¶∞‡ßç‡¶∏‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡ßá‡•§"""
    if 'target_user_id' in context.user_data:
        del context.user_data['target_user_id']
    if 'balance_action' in context.user_data:
        del context.user_data['balance_action']
        
    await update.message.reply_text("‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    return ConversationHandler.END
