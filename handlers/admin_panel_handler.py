# advanced_earning_bot/handlers/admin_panel_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from config import ADMIN_IDS
from modules import user_manager, bot_settings, ad_manager

# ... (‡¶™‡ßÇ‡¶∞‡ßç‡¶¨‡ßá‡¶∞ ‡¶ï‡ßã‡¶° ‡¶è‡¶ï‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá, ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶®‡¶§‡ßÅ‡¶® ‡¶´‡¶æ‡¶Ç‡¶∂‡¶® ‡¶Ø‡ßã‡¶ó ‡¶π‡¶¨‡ßá ‡¶è‡¶¨‡¶Ç ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶π‡¶¨‡ßá) ...
# ConversationHandler ‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶∏‡ßç‡¶ü‡ßá‡¶ü
USER_ID_INPUT, BALANCE_CHANGE_INPUT, SETTING_VALUE_INPUT = range(3)


# --- Helper Functions ---
async def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def build_admin_menu():
    pending_ads_count = len(ad_manager.get_pending_ads())
    ad_manage_text = f"üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü ({pending_ads_count})" if pending_ads_count > 0 else "üì¢ ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü"
    keyboard = [
        [InlineKeyboardButton("üìä ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®", callback_data="admin_stats")],
        [InlineKeyboardButton("‚öôÔ∏è ‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏", callback_data="admin_global_settings")],
        [InlineKeyboardButton("üîß ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤", callback_data="admin_feature_control")],
        [InlineKeyboardButton("üë§ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü", callback_data="admin_user_manage_start")],
        [InlineKeyboardButton(ad_manage_text, callback_data="admin_ad_manage")],
        [InlineKeyboardButton("‚ùå ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data="admin_close")]
    ]
    return InlineKeyboardMarkup(keyboard)

def build_user_manage_menu(user_id, is_banned=False):
    ban_text = "‚úÖ ‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®" if is_banned else "üö´ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®"
    keyboard = [
        [InlineKeyboardButton("üí∞ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶Ø‡ßã‡¶ó", callback_data=f"user_add_balance_{user_id}"),
         InlineKeyboardButton("üí∏ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ï‡¶æ‡¶ü‡ßÅ‡¶®", callback_data=f"user_deduct_balance_{user_id}")],
        [InlineKeyboardButton(ban_text, callback_data=f"user_toggle_ban_{user_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- Main Command Handler ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await update.message.reply_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø‡•§")
        return
    text = "üëã ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:"
    if update.callback_query:
        await update.callback_query.edit_message_text(text, reply_markup=build_admin_menu())
    else:
        await update.message.reply_text(text, reply_markup=build_admin_menu())


# --- Callback Query Handlers ---
async def admin_panel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    if not await is_admin(user_id):
        await query.edit_message_text("‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")
        return
    
    data = query.data

    if data == "admin_main_menu":
        await admin_panel(update, context)
    elif data == "admin_stats":
        stats_result = user_manager.get_bot_statistics()
        if stats_result['success']:
            stats = stats_result['data']
            text = (f"üìä **‡¶¨‡¶ü‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®**\n\n"
                    f"üë§ ‡¶Æ‡ßã‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: `{stats['total_users']}`\n"
                    f"‚úÖ ‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: `{stats['verified_users']}`\n"
                    f"üö´ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ: `{stats['banned_users']}`\n\n"
                    f"_(‡¶è‡¶á ‡¶§‡¶•‡ßç‡¶Ø ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá‡¶≤-‡¶ü‡¶æ‡¶á‡¶Æ‡ßá ‡¶Ü‡¶™‡¶°‡ßá‡¶ü ‡¶π‡¶Ø‡¶º‡•§)_")
        else:
            text = f"‡¶¶‡ßÅ‡¶É‡¶ñ‡¶ø‡¶§, ‡¶™‡¶∞‡¶ø‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n`{stats_result['message']}`"
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]])
        await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')
    elif data == "admin_global_settings":
        await show_global_settings(query)
    elif data == "admin_feature_control":
        await show_feature_control(query)
    elif data == "admin_ad_manage":
        await show_pending_ads(query)
    elif data == "admin_close":
        await query.edit_message_text("‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")


# --- Global Settings ---
async def show_global_settings(query: Update, context: ContextTypes.DEFAULT_TYPE):
    """‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶è‡¶¨‡¶Ç ‡¶§‡¶æ‡¶¶‡ßá‡¶∞ ‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡¶æ‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ‡¶Ø‡¶º‡•§"""
    settings_to_display = {
        'daily_bonus_amount': 'üí∞ ‡¶¶‡ßà‡¶®‡¶ø‡¶ï ‡¶¨‡ßã‡¶®‡¶æ‡¶∏',
        'transfer_fee_percent': 'üí∏ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞ ‡¶´‡¶ø (%)',
        'blogger_page_url': 'üåê ‡¶¨‡ßç‡¶≤‡¶ó‡¶æ‡¶∞ URL'
    }
    
    text = "‚öôÔ∏è **‡¶ó‡ßç‡¶≤‡ßã‡¶¨‡¶æ‡¶≤ ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏**\n\n‡¶è‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶ü‡ßá‡¶∞ ‡¶Æ‡ßÇ‡¶≤ ‡¶®‡¶ø‡¶Ø‡¶º‡¶Æ‡¶æ‡¶¨‡¶≤‡ßÄ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®:\n\n"
    buttons = []
    
    for key, name in settings_to_display.items():
        value, _ = bot_settings.get_setting(key)
        text += f"**{name}:** `{value}`\n"
        buttons.append([InlineKeyboardButton(f"‚úèÔ∏è {name} ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®", callback_data=f"edit_setting_{key}")])

    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")])
    keyboard = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def edit_setting_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    setting_key = query.data.replace("edit_setting_", "")
    context.user_data['setting_to_edit'] = setting_key
    
    current_value, _ = bot_settings.get_setting(setting_key)
    text = f"‡¶Ü‡¶™‡¶®‡¶ø `{setting_key}` ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶õ‡ßá‡¶®‡•§\n‡¶¨‡¶∞‡ßç‡¶§‡¶Æ‡¶æ‡¶® ‡¶Æ‡¶æ‡¶®: `{current_value}`\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶®‡¶§‡ßÅ‡¶® ‡¶Æ‡¶æ‡¶® ‡¶¶‡¶ø‡¶®:"
    context.user_data['last_admin_message'] = await query.edit_message_text(text, parse_mode='Markdown')
    return SETTING_VALUE_INPUT

async def setting_value_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    new_value = update.message.text
    await update.message.delete()
    setting_key = context.user_data.get('setting_to_edit')
    
    if not setting_key:
        return ConversationHandler.END

    bot_settings.update_setting(setting_key, new_value=new_value)
    await context.user_data['last_admin_message'].edit_text(f"`{setting_key}`-‡¶è‡¶∞ ‡¶Æ‡¶æ‡¶® ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá `{new_value}`-‡¶§‡ßá ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", parse_mode='Markdown')

    del context.user_data['setting_to_edit']
    
    # ‡¶∏‡ßá‡¶ü‡¶ø‡¶Ç‡¶∏ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®
    await asyncio.sleep(2)
    await show_global_settings(context.user_data['last_admin_message'], context)

    return ConversationHandler.END


# ... (Feature Control, Ad Management, User Management ‡¶è‡¶∞ ‡¶¨‡¶æ‡¶ï‡¶ø ‡¶ï‡ßã‡¶° ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã‡¶á ‡¶•‡¶æ‡¶ï‡¶¨‡ßá) ...
# --- Feature Control ---
async def show_feature_control(query):
    text = "üîß ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ï‡¶®‡ßç‡¶ü‡ßç‡¶∞‡ßã‡¶≤\n\n‡¶è‡¶ñ‡¶æ‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶∞‡ßç‡¶¶‡¶ø‡¶∑‡ßç‡¶ü ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶ö‡¶æ‡¶≤‡ßÅ ‡¶¨‡¶æ ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
    settings_to_show = {'feature_ads_view': 'üëÅÔ∏è ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶¶‡ßá‡¶ñ‡¶æ', 'feature_deposit': 'üí∞ ‡¶°‡¶ø‡¶™‡ßã‡¶ú‡¶ø‡¶ü', 'feature_withdrawal': 'üí∏ ‡¶â‡¶á‡¶•‡¶°‡ßç‡¶∞', 'feature_balance_transfer': 'üîÅ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏ ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶´‡¶æ‡¶∞'}
    buttons = []
    for setting_name, button_text in settings_to_show.items():
        _, is_active = bot_settings.get_setting(setting_name)
        status_icon = "‚úÖ" if is_active else "‚ùå"
        buttons.append([InlineKeyboardButton(f"{button_text} {status_icon}", callback_data=f"toggle_{setting_name}")])
    buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))

async def toggle_feature_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    setting_name = query.data.replace("toggle_", "")
    _, current_status = bot_settings.get_setting(setting_name)
    new_status = not current_status
    bot_settings.update_setting(setting_name, new_status=new_status)
    await show_feature_control(query)

# --- Ad Management ---
async def show_pending_ads(query):
    pending_ads = ad_manager.get_pending_ads()
    if not pending_ads:
        text = " ‡¶™‡¶∞‡ßç‡¶Ø‡¶æ‡¶≤‡ßã‡¶ö‡¶®‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶®‡ßá‡¶á‡•§"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return

    ad_data = pending_ads[0]
    columns = ['ad_id', 'owner_user_id', 'ad_source', 'ad_type', 'ad_content', 'status', 'target_views', 'current_views', 'view_duration_seconds', 'viewed_by_users']
    ad_dict = dict(zip(columns, ad_data))
    text = (f"**üì¢ ‡¶®‡¶§‡ßÅ‡¶® ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶® ‡¶∞‡¶ø‡¶≠‡¶ø‡¶â**\n\n"
            f"**Ad ID:** `{ad_dict['ad_id']}`\n**‡¶ú‡¶Æ‡¶æ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßá:** `{ad_dict['owner_user_id']}`\n"
            f"**‡¶ß‡¶∞‡¶®:** `{ad_dict['ad_type']}`\n**‡¶ï‡¶®‡ßç‡¶ü‡ßá‡¶®‡ßç‡¶ü:** `{ad_dict['ad_content']}`\n"
            f"**‡¶ü‡¶æ‡¶∞‡ßç‡¶ó‡ßá‡¶ü ‡¶≠‡¶ø‡¶â:** `{ad_dict['target_views']}`\n**‡¶∏‡¶Æ‡¶Ø‡¶º‡¶ï‡¶æ‡¶≤:** `{ad_dict['view_duration_seconds']} ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°`\n\n"
            f"‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶¨‡¶æ ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:")
    keyboard = [[InlineKeyboardButton("‚úÖ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶®", callback_data=f"ad_approve_{ad_dict['ad_id']}"),
                 InlineKeyboardButton("‚ùå ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶®", callback_data=f"ad_reject_{ad_dict['ad_id']}")],
                [InlineKeyboardButton("‚û°Ô∏è ‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ", callback_data="admin_ad_manage")],
                [InlineKeyboardButton("‚¨ÖÔ∏è ‡¶´‡¶ø‡¶∞‡ßá ‡¶Ø‡¶æ‡¶®", callback_data="admin_main_menu")]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode='Markdown')

async def ad_review_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split('_')
    action = data[1] 
    ad_id = int(data[2])
    if action == "approve":
        ad_manager.update_ad_status(ad_id, "approved")
        await query.answer("‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶ü‡¶ø ‡¶Ö‡¶®‡ßÅ‡¶Æ‡ßã‡¶¶‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", show_alert=True)
    elif action == "reject":
        ad_manager.update_ad_status(ad_id, "rejected")
        await query.answer("‡¶¨‡¶ø‡¶ú‡ßç‡¶û‡¶æ‡¶™‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=True)
    await show_pending_ads(query)

# --- User Management Conversation ---
async def user_manage_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    text = "üë§ **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú‡¶Æ‡ßá‡¶®‡ßç‡¶ü**\n\n‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶Ø‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá ‡¶Æ‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶ú ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ ‡¶Ü‡¶á‡¶°‡¶ø ‡¶¶‡¶ø‡¶®:"
    context.user_data['last_admin_message'] = await query.edit_message_text(text)
    return USER_ID_INPUT

async def user_id_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        target_user_id = int(update.message.text)
        await update.message.delete()
        user_data = user_manager.get_user_by_id(target_user_id)
        if not user_data:
            await context.user_data['last_admin_message'].edit_text("‡¶è‡¶á ‡¶Ü‡¶á‡¶°‡¶ø‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ /cancel ‡¶¶‡¶ø‡¶®‡•§")
            return USER_ID_INPUT
        context.user_data['target_user_id'] = target_user_id
        await show_user_profile(context.user_data['last_admin_message'], user_data)
    except (ValueError, KeyError):
        await context.user_data['last_admin_message'].edit_text("‡¶è‡¶ü‡¶ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶ø‡¶â‡¶Æ‡ßá‡¶∞‡¶ø‡¶ï ‡¶Ü‡¶á‡¶°‡¶ø ‡¶®‡¶Ø‡¶º‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶¨‡¶æ /cancel ‡¶¶‡¶ø‡¶®‡•§")
        return USER_ID_INPUT
    return ConversationHandler.END

async def show_user_profile(message_or_query, user_data):
    message = message_or_query if not hasattr(message_or_query, 'message') else message_or_query.message
    user_id = user_data['user_id']
    text = (f"üë§ **‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶´‡¶æ‡¶á‡¶≤**\n\n"
            f"**ID:** `{user_id}`\n**Username:** @{user_data.get('username', 'N/A')}\n"
            f"**‡¶¨‡ßç‡¶Ø‡¶æ‡¶≤‡ßá‡¶®‡ßç‡¶∏:** `{user_data['balance']}` ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü\n**‡¶≠‡ßá‡¶∞‡¶ø‡¶´‡¶æ‡¶á‡¶°:** `{'‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' if user_data['is_verified'] else '‡¶®‡¶æ'}`\n"
            f"**‡¶¨‡ßç‡¶Ø‡¶æ‡¶®‡¶°:** `{'‡¶π‡ßç‡¶Ø‡¶æ‡¶Å' if user_data['is_banned'] else '‡¶®‡¶æ'}`\n**‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶®‡¶ø‡¶Ç:** `{user_data['warning_count']}`\n")
    keyboard = build_user_manage_menu(user_id, user_data['is_banned'])
    await message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')

async def user_manage_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split('_')
    action = data[1]
    target_user_id = int(data[-1])
    if action == "toggle" and data[2] == "ban":
        user_data = user_manager.get_user_by_id(target_user_id)
        new_ban_status = not user_data['is_banned']
        user_manager.set_ban_status(target_user_id, new_ban_status)
        await query.answer(f"‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ï‡¶æ‡¶∞‡ßÄ‡¶ï‡ßá {'‡¶¨‡ßç‡¶Ø‡¶æ‡¶®' if new_ban_status else '‡¶Ü‡¶®‡¶¨‡ßç‡¶Ø‡¶æ‡¶®'} ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", show_alert=True)
        updated_user_data = user_manager.get_user_by_id(target_user_id)
        await show_user_profile(query, updated_user_data)
    elif action in ["add", "deduct"]:
        context.user_data['target_user_id'] = target_user_id
        context.user_data['balance_action'] = action
        action_text = "‡¶Ø‡ßã‡¶ó" if action == "add" else "‡¶ï‡¶æ‡¶ü‡¶§‡ßá"
        context.user_data['last_admin_message'] = await query.edit_message_text(f"‡¶Ü‡¶™‡¶®‡¶ø ‡¶ï‡¶§ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü {action_text} ‡¶ö‡¶æ‡¶®? ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡¶ü‡¶ø ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:")
        return BALANCE_CHANGE_INPUT
    return ConversationHandler.END

async def balance_change_input_received(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        amount = int(update.message.text)
        await update.message.delete()
        if amount <= 0:
            await context.user_data['last_admin_message'].edit_text("‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶è‡¶ï‡¶ü‡¶ø ‡¶™‡¶ú‡¶ø‡¶ü‡¶ø‡¶≠ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶π‡¶§‡ßá ‡¶π‡¶¨‡ßá‡•§")
            return ConversationHandler.END
        target_user_id = context.user_data['target_user_id']
        action = context.user_data['balance_action']
        amount_to_change = amount if action == "add" else -amount
        user_manager.update_balance(target_user_id, amount_to_change)
        user_data = user_manager.get_user_by_id(target_user_id)
        await show_user_profile(context.user_data['last_admin_message'], user_data)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá {amount} ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü {'‡¶Ø‡ßã‡¶ó' if action == 'add' else '‡¶ï‡¶æ‡¶ü‡¶æ'} ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    except (ValueError, KeyError):
        await context.user_data['last_admin_message'].edit_text("‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶∏‡¶†‡¶ø‡¶ï ‡¶™‡¶∞‡¶ø‡¶Æ‡¶æ‡¶£ ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§")
    return ConversationHandler.END


async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text("‡¶Ö‡¶™‡¶æ‡¶∞‡ßá‡¶∂‡¶® ‡¶¨‡¶æ‡¶§‡¶ø‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")
    await admin_panel(update, context)
    return ConversationHandler.END

# ‡¶è‡¶á ‡¶Æ‡¶°‡¶ø‡¶â‡¶≤‡¶ü‡¶ø ‡¶∏‡¶∞‡¶æ‡¶∏‡¶∞‡¶ø ‡¶∞‡¶æ‡¶® ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶Ø‡¶º‡•§
if __name__ == '__main__':
    pass # ‡¶è‡¶á ‡¶≤‡¶æ‡¶á‡¶®‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®, ‡¶ï‡¶æ‡¶∞‡¶£ show_user_profile ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá asyncio ‡¶á‡¶Æ‡ßç‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá
import asyncio
